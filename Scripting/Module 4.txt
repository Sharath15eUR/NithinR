Logical Operators
    1)  #!/bin/bash

        file_path=""

        if [ -e "$file_path" -a -x "$file_path" ]; then
            echo "The file exists and is executable."
        else
            echo "The file either does not exist or is not executable."
        fi

Arithmetic Operators
    1)  #!/bin/bash

        read -p "Enter the first number: " num1
        read -p "Enter the second number: " num2

        if [ "$num1" -ne "$num2" ]; then
            echo "$num1 is not equal to $num2"
        else
            echo "$num1 is equal to $num2"
        fi

String and File attributes
    1)  #!/bin/bash

        file="example.txt"

        if [ -r "$file" ]; then
            echo "The file $file is readable."
        else
            echo "The file $file is not readable."
        fi

    2)  #!/bin/bash

        script="myscript.sh"

        if [ -x "$script" ]; then
            echo "The script $script is executable."
        else
            echo "The script $script is not executable."
        fi

    3)  #!/bin/bash

        file="mydata.txt"

        if [ -o "$file" ]; then
            echo "You are the owner of the file $file."
        else
            echo "You are not the owner of the file $file."
        fi

Conditional Loops
    1)  #!/bin/bash

        # Input the value of n from the user
        read -p "Enter the value of n: " n

        sum=0
        count=0
        num=2

        while [ $count -lt $n ]; do
            is_prime=true
            for ((i=2; i*i<=num; i++)); do
                if [ $((num % i)) -eq 0 ]; then
                    is_prime=false
                    break
                fi
            done

            if $is_prime; then
                sum=$((sum + num))
                count=$((count + 1))
            fi

            num=$((num + 1))
        done

        echo "The sum of the first $n prime numbers is: $sum"

More on Loops
    1)  #!/usr/bin/env bash

        for dir in test*; do
            echo "Files in $dir directory:"
            echo ""

            while IFS= read -r -d $'\0' file; do
                echo "$file"
            done < <(find "$dir" -maxdepth 1 -type f -print0)

            echo "------------------------"
        done

    2)  mv nested-for.sh nested-while.sh

Case statements
    1)  #!/bin/bash

        while true; do
            read -p "Enter value for a: " a
            read -p "Enter value for b: " b

            echo "Menu:"
            echo "1. Addition (+)"
            echo "2. Subtraction (-)"
            echo "3. Multiplication (*)"
            echo "4. Division (/)"
            echo "5. Quit"

            read -p "Select an operation (1/2/3/4/5): " choice

            case $choice in
                1)
                    result=$((a + b))
                    echo "Result: $a + $b = $result"
                    ;;
                2)
                    result=$((a - b))
                    echo "Result: $a - $b = $result"
                    ;;
                3)
                    result=$((a * b))
                    echo "Result: $a * $b = $result"
                    ;;
                4)
                    if [ "$b" -eq 0 ]; then
                        echo "Error: Division by zero is not allowed."
                    else
                        result=$(awk "BEGIN {printf \"%.2f\", $a / $b}")
                        echo "Result: $a / $b = $result"
                    fi
                    ;;
                5)
                    echo "Exiting the program."
                    exit 0
                    ;;
                *)
                    echo "Invalid choice. Please select a valid option (1/2/3/4/5)."
                    ;;
            esac
        done

Using File Descriptors
    1)  #!/bin/bash

        exec 3>>"test.txt"

        echo "This is line 1" >&3
        echo "This is line 2" >&3
        echo "This is line 3" >&3

        exec 3>&-

        echo "Lines appended to test.txt."

    2)  #!/bin/bash

        exec 3<"test.txt"
        cat <&3
        exec 3<&-

Bascis of Functions
    1)  #!/bin/bash

        function displayDiskSpaceUsage {
            echo "Disk Space Usage:"
            df -h
        }

        function displayFileSystemUsage {
            echo "File System Usage:"
            du -h
        }

        echo "Choose an option:"
        echo "1. Display Disk Space Usage"
        echo "2. Display File System Usage"
        echo "3. Exit"

        read -p "Enter your choice (1/2/3): " choice

        case $choice in
            1)
                displayDiskSpaceUsage
                ;;
            2)
                displayFileSystemUsage
                ;;
            3)
                echo "Exiting the program."
                exit 0
                ;;
            *)
                echo "Invalid choice. Please select a valid option (1/2/3)."
                ;;
        esac

More on Functions
    1)  #!/bin/bash

        multiply() {
            local arg1=$1
            local arg2=$2
            local result=$((arg1 * arg2))
            echo "Multiplying $arg1 by $arg2 equals $result"
        }

        multiply 1 2
        multiply 2 3
        multiply 3 4

Array on Functions
    1)  #!/bin/bash

        sumArrayElements() {
            local sum=0
            for element in "${@}"; do
                sum=$((sum + element))
            done
            echo "Sum of elements: $sum"
        }

        array1=(1 2 3)
        array2=(4 5 6)

        echo "Calling with array1: ${array1[@]}"
        sumArrayElements "${array1[@]}"

        echo "Calling with array2: ${array2[@]}"
        sumArrayElements "${array2[@]}"

